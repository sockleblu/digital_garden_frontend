{
  "version": 3,
  "sources": ["../../@sindresorhus/is/dist/index.js", "../../emojilib/index.js", "../../char-regex/index.js", "../../unicode-emoji-modifier-base/index.js", "../../skin-tone/index.js", "../../node-emoji/lib/index.js"],
  "sourcesContent": ["\"use strict\";\n/// <reference lib=\"es2018\"/>\n/// <reference lib=\"dom\"/>\n/// <reference types=\"node\"/>\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst typedArrayTypeNames = [\n    'Int8Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Int16Array',\n    'Uint16Array',\n    'Int32Array',\n    'Uint32Array',\n    'Float32Array',\n    'Float64Array',\n    'BigInt64Array',\n    'BigUint64Array'\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    'Function',\n    'Generator',\n    'AsyncGenerator',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction',\n    'AsyncFunction',\n    'Observable',\n    'Array',\n    'Buffer',\n    'Object',\n    'RegExp',\n    'Date',\n    'Error',\n    'Map',\n    'Set',\n    'WeakMap',\n    'WeakSet',\n    'ArrayBuffer',\n    'SharedArrayBuffer',\n    'DataView',\n    'Promise',\n    'URL',\n    'HTMLElement',\n    ...typedArrayTypeNames\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    'null',\n    'undefined',\n    'string',\n    'number',\n    'bigint',\n    'boolean',\n    'symbol'\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n    return (value) => typeof value === type;\n}\nconst { toString } = Object.prototype;\nconst getObjectType = (value) => {\n    const objectTypeName = toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n        return 'HTMLElement';\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nconst isObjectOfType = (type) => (value) => getObjectType(value) === type;\nfunction is(value) {\n    if (value === null) {\n        return 'null';\n    }\n    switch (typeof value) {\n        case 'undefined':\n            return 'undefined';\n        case 'string':\n            return 'string';\n        case 'number':\n            return 'number';\n        case 'boolean':\n            return 'boolean';\n        case 'function':\n            return 'Function';\n        case 'bigint':\n            return 'bigint';\n        case 'symbol':\n            return 'symbol';\n        default:\n    }\n    if (is.observable(value)) {\n        return 'Observable';\n    }\n    if (is.array(value)) {\n        return 'Array';\n    }\n    if (is.buffer(value)) {\n        return 'Buffer';\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\nis.number = (value) => isNumberType(value) && !is.nan(value);\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\nis.null_ = (value) => value === null;\nis.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');\nis.boolean = (value) => value === true || value === false;\nis.symbol = isOfType('symbol');\nis.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion) => {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!is.function_(assertion)) {\n        return true;\n    }\n    return value.every(assertion);\n};\nis.buffer = (value) => { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false; };\nis.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);\nis.object = (value) => !is.null_(value) && (typeof value === 'object' || is.function_(value));\nis.iterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]); };\nis.asyncIterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]); };\nis.generator = (value) => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = (value) => isObjectOfType('Promise')(value);\nconst hasPromiseAPI = (value) => {\n    var _a, _b;\n    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) &&\n        is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);\n};\nis.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = (value) => getObjectType(value) === 'AsyncGeneratorFunction';\nis.asyncFunction = (value) => getObjectType(value) === 'AsyncFunction';\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = (value) => isObjectOfType('Map')(value);\nis.set = (value) => isObjectOfType('Set')(value);\nis.weakMap = (value) => isObjectOfType('WeakMap')(value);\nis.weakSet = (value) => isObjectOfType('WeakSet')(value);\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = (value) => isObjectOfType('URL')(value);\nis.urlString = (value) => {\n    if (!is.string(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n};\n// TODO: Use the `not` operator with a type guard here when it's available.\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = (value) => Boolean(value);\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = (value) => !value;\nis.nan = (value) => Number.isNaN(value);\nis.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = (value) => Number.isInteger(value);\nis.safeInteger = (value) => Number.isSafeInteger(value);\nis.plainObject = (value) => {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/master/index.js\n    if (toString.call(value) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(value);\n    return prototype === null || prototype === Object.getPrototypeOf({});\n};\nis.typedArray = (value) => isTypedArrayName(getObjectType(value));\nconst isValidLength = (value) => is.safeInteger(value) && value >= 0;\nis.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.inRange = (value, range) => {\n    if (is.number(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (is.array(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\nconst NODE_TYPE_ELEMENT = 1;\nconst DOM_PROPERTIES_TO_CHECK = [\n    'innerHTML',\n    'ownerDocument',\n    'style',\n    'attributes',\n    'nodeValue'\n];\nis.domElement = (value) => {\n    return is.object(value) &&\n        value.nodeType === NODE_TYPE_ELEMENT &&\n        is.string(value.nodeName) &&\n        !is.plainObject(value) &&\n        DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n};\nis.observable = (value) => {\n    var _a, _b, _c, _d;\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native\n    if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n        return true;\n    }\n    if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {\n        return true;\n    }\n    return false;\n};\nis.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = (value) => value === Infinity || value === -Infinity;\nconst isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = (value) => is.array(value) && value.length === 0;\nis.nonEmptyArray = (value) => is.array(value) && value.length > 0;\nis.emptyString = (value) => is.string(value) && value.length === 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = (value) => is.string(value) && value.length > 0;\nconst isWhiteSpaceString = (value) => is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);\nis.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\nis.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = (value) => is.set(value) && value.size === 0;\nis.nonEmptySet = (value) => is.set(value) && value.size > 0;\nis.emptyMap = (value) => is.map(value) && value.size === 0;\nis.nonEmptyMap = (value) => is.map(value) && value.size > 0;\nconst predicateOnArray = (method, predicate, values) => {\n    if (!is.function_(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError('Invalid number of values');\n    }\n    return method.call(values, predicate);\n};\nis.any = (predicate, ...values) => {\n    const predicates = is.array(predicate) ? predicate : [predicate];\n    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value) => {\n    if (!condition) {\n        throw new TypeError(`Expected value which is \\`${description}\\`, received value of type \\`${is(value)}\\`.`);\n    }\n};\nexports.assert = {\n    // Unknowns.\n    undefined: (value) => assertType(is.undefined(value), 'undefined', value),\n    string: (value) => assertType(is.string(value), 'string', value),\n    number: (value) => assertType(is.number(value), 'number', value),\n    bigint: (value) => assertType(is.bigint(value), 'bigint', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function_: (value) => assertType(is.function_(value), 'Function', value),\n    null_: (value) => assertType(is.null_(value), 'null', value),\n    class_: (value) => assertType(is.class_(value), \"Class\" /* class_ */, value),\n    boolean: (value) => assertType(is.boolean(value), 'boolean', value),\n    symbol: (value) => assertType(is.symbol(value), 'symbol', value),\n    numericString: (value) => assertType(is.numericString(value), \"string with a number\" /* numericString */, value),\n    array: (value, assertion) => {\n        const assert = assertType;\n        assert(is.array(value), 'Array', value);\n        if (assertion) {\n            value.forEach(assertion);\n        }\n    },\n    buffer: (value) => assertType(is.buffer(value), 'Buffer', value),\n    nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), \"null or undefined\" /* nullOrUndefined */, value),\n    object: (value) => assertType(is.object(value), 'Object', value),\n    iterable: (value) => assertType(is.iterable(value), \"Iterable\" /* iterable */, value),\n    asyncIterable: (value) => assertType(is.asyncIterable(value), \"AsyncIterable\" /* asyncIterable */, value),\n    generator: (value) => assertType(is.generator(value), 'Generator', value),\n    asyncGenerator: (value) => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n    nativePromise: (value) => assertType(is.nativePromise(value), \"native Promise\" /* nativePromise */, value),\n    promise: (value) => assertType(is.promise(value), 'Promise', value),\n    generatorFunction: (value) => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n    asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    asyncFunction: (value) => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    boundFunction: (value) => assertType(is.boundFunction(value), 'Function', value),\n    regExp: (value) => assertType(is.regExp(value), 'RegExp', value),\n    date: (value) => assertType(is.date(value), 'Date', value),\n    error: (value) => assertType(is.error(value), 'Error', value),\n    map: (value) => assertType(is.map(value), 'Map', value),\n    set: (value) => assertType(is.set(value), 'Set', value),\n    weakMap: (value) => assertType(is.weakMap(value), 'WeakMap', value),\n    weakSet: (value) => assertType(is.weakSet(value), 'WeakSet', value),\n    int8Array: (value) => assertType(is.int8Array(value), 'Int8Array', value),\n    uint8Array: (value) => assertType(is.uint8Array(value), 'Uint8Array', value),\n    uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n    int16Array: (value) => assertType(is.int16Array(value), 'Int16Array', value),\n    uint16Array: (value) => assertType(is.uint16Array(value), 'Uint16Array', value),\n    int32Array: (value) => assertType(is.int32Array(value), 'Int32Array', value),\n    uint32Array: (value) => assertType(is.uint32Array(value), 'Uint32Array', value),\n    float32Array: (value) => assertType(is.float32Array(value), 'Float32Array', value),\n    float64Array: (value) => assertType(is.float64Array(value), 'Float64Array', value),\n    bigInt64Array: (value) => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n    bigUint64Array: (value) => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n    arrayBuffer: (value) => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n    sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n    dataView: (value) => assertType(is.dataView(value), 'DataView', value),\n    urlInstance: (value) => assertType(is.urlInstance(value), 'URL', value),\n    urlString: (value) => assertType(is.urlString(value), \"string with a URL\" /* urlString */, value),\n    truthy: (value) => assertType(is.truthy(value), \"truthy\" /* truthy */, value),\n    falsy: (value) => assertType(is.falsy(value), \"falsy\" /* falsy */, value),\n    nan: (value) => assertType(is.nan(value), \"NaN\" /* nan */, value),\n    primitive: (value) => assertType(is.primitive(value), \"primitive\" /* primitive */, value),\n    integer: (value) => assertType(is.integer(value), \"integer\" /* integer */, value),\n    safeInteger: (value) => assertType(is.safeInteger(value), \"integer\" /* safeInteger */, value),\n    plainObject: (value) => assertType(is.plainObject(value), \"plain object\" /* plainObject */, value),\n    typedArray: (value) => assertType(is.typedArray(value), \"TypedArray\" /* typedArray */, value),\n    arrayLike: (value) => assertType(is.arrayLike(value), \"array-like\" /* arrayLike */, value),\n    domElement: (value) => assertType(is.domElement(value), \"HTMLElement\" /* domElement */, value),\n    observable: (value) => assertType(is.observable(value), 'Observable', value),\n    nodeStream: (value) => assertType(is.nodeStream(value), \"Node.js Stream\" /* nodeStream */, value),\n    infinite: (value) => assertType(is.infinite(value), \"infinite number\" /* infinite */, value),\n    emptyArray: (value) => assertType(is.emptyArray(value), \"empty array\" /* emptyArray */, value),\n    nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), \"non-empty array\" /* nonEmptyArray */, value),\n    emptyString: (value) => assertType(is.emptyString(value), \"empty string\" /* emptyString */, value),\n    nonEmptyString: (value) => assertType(is.nonEmptyString(value), \"non-empty string\" /* nonEmptyString */, value),\n    emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* emptyStringOrWhitespace */, value),\n    emptyObject: (value) => assertType(is.emptyObject(value), \"empty object\" /* emptyObject */, value),\n    nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), \"non-empty object\" /* nonEmptyObject */, value),\n    emptySet: (value) => assertType(is.emptySet(value), \"empty set\" /* emptySet */, value),\n    nonEmptySet: (value) => assertType(is.nonEmptySet(value), \"non-empty set\" /* nonEmptySet */, value),\n    emptyMap: (value) => assertType(is.emptyMap(value), \"empty map\" /* emptyMap */, value),\n    nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), \"non-empty map\" /* nonEmptyMap */, value),\n    // Numbers.\n    evenInteger: (value) => assertType(is.evenInteger(value), \"even integer\" /* evenInteger */, value),\n    oddInteger: (value) => assertType(is.oddInteger(value), \"odd integer\" /* oddInteger */, value),\n    // Two arguments.\n    directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\" /* directInstanceOf */, instance),\n    inRange: (value, range) => assertType(is.inRange(value, range), \"in range\" /* inRange */, value),\n    // Variadic functions.\n    any: (predicate, ...values) => assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* any */, values),\n    all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* all */, values)\n};\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_\n    },\n    function: {\n        value: is.function_\n    },\n    null: {\n        value: is.null_\n    }\n});\nObject.defineProperties(exports.assert, {\n    class: {\n        value: exports.assert.class_\n    },\n    function: {\n        value: exports.assert.function_\n    },\n    null: {\n        value: exports.assert.null_\n    }\n});\nexports.default = is;\n// For CommonJS default export support\nmodule.exports = is;\nmodule.exports.default = is;\nmodule.exports.assert = exports.assert;\n", "module.exports = {\n  lib: require('./emojis'),\n  ordered: require('./ordered'),\n  fitzpatrick_scale_modifiers: [\"\uD83C\uDFFB\", \"\uD83C\uDFFC\", \"\uD83C\uDFFD\", \"\uD83C\uDFFE\", \"\uD83C\uDFFF\"]\n}\n", "\"use strict\"\r\n\r\n// Based on: https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/.internal/unicodeSize.js\r\n\r\nmodule.exports = () => {\r\n\t// Used to compose unicode character classes.\r\n\tconst astralRange = \"\\\\ud800-\\\\udfff\"\r\n\tconst comboMarksRange = \"\\\\u0300-\\\\u036f\"\r\n\tconst comboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\"\r\n\tconst comboSymbolsRange = \"\\\\u20d0-\\\\u20ff\"\r\n\tconst comboMarksExtendedRange = \"\\\\u1ab0-\\\\u1aff\"\r\n\tconst comboMarksSupplementRange = \"\\\\u1dc0-\\\\u1dff\"\r\n\tconst comboRange = comboMarksRange + comboHalfMarksRange + comboSymbolsRange + comboMarksExtendedRange + comboMarksSupplementRange\r\n\tconst varRange = \"\\\\ufe0e\\\\ufe0f\"\r\n\tconst familyRange = \"\\\\uD83D\\\\uDC69\\\\uD83C\\\\uDFFB\\\\u200D\\\\uD83C\\\\uDF93\"\r\n\r\n\t// Used to compose unicode capture groups.\r\n\tconst astral = `[${astralRange}]`\r\n\tconst combo = `[${comboRange}]`\r\n\tconst fitz = \"\\\\ud83c[\\\\udffb-\\\\udfff]\"\r\n\tconst modifier = `(?:${combo}|${fitz})`\r\n\tconst nonAstral = `[^${astralRange}]`\r\n\tconst regional = \"(?:\\\\uD83C[\\\\uDDE6-\\\\uDDFF]){2}\"\r\n\tconst surrogatePair = \"[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]\"\r\n\tconst zwj = \"\\\\u200d\"\r\n\tconst blackFlag = \"(?:\\\\ud83c\\\\udff4\\\\udb40\\\\udc67\\\\udb40\\\\udc62\\\\udb40(?:\\\\udc65|\\\\udc73|\\\\udc77)\\\\udb40(?:\\\\udc6e|\\\\udc63|\\\\udc6c)\\\\udb40(?:\\\\udc67|\\\\udc74|\\\\udc73)\\\\udb40\\\\udc7f)\"\r\n\tconst family = `[${familyRange}]`\r\n\r\n\t// Used to compose unicode regexes.\r\n\tconst optModifier = `${modifier}?`\r\n\tconst optVar = `[${varRange}]?`\r\n\tconst optJoin = `(?:${zwj}(?:${[nonAstral, regional, surrogatePair].join(\"|\")})${optVar + optModifier})*`\r\n\tconst seq = optVar + optModifier + optJoin\r\n\tconst nonAstralCombo = `${nonAstral}${combo}?`\r\n\tconst symbol = `(?:${[nonAstralCombo, combo, regional, surrogatePair, astral, family].join(\"|\")})`\r\n\r\n\t// Used to match [String symbols](https://mathiasbynens.be/notes/javascript-unicode).\r\n\treturn new RegExp(`${blackFlag}|${fitz}(?=${fitz})|${symbol + seq}`, \"g\")\r\n}\r\n", "// Generated using `npm run build`. Do not edit!\nmodule.exports = new Set([\n\t0x261D,\n\t0x26F9,\n\t0x270A,\n\t0x270B,\n\t0x270C,\n\t0x270D,\n\t0x1F385,\n\t0x1F3C3,\n\t0x1F3C4,\n\t0x1F3CA,\n\t0x1F3CB,\n\t0x1F442,\n\t0x1F443,\n\t0x1F446,\n\t0x1F447,\n\t0x1F448,\n\t0x1F449,\n\t0x1F44A,\n\t0x1F44B,\n\t0x1F44C,\n\t0x1F44D,\n\t0x1F44E,\n\t0x1F44F,\n\t0x1F450,\n\t0x1F466,\n\t0x1F467,\n\t0x1F468,\n\t0x1F469,\n\t0x1F46E,\n\t0x1F470,\n\t0x1F471,\n\t0x1F472,\n\t0x1F473,\n\t0x1F474,\n\t0x1F475,\n\t0x1F476,\n\t0x1F477,\n\t0x1F478,\n\t0x1F47C,\n\t0x1F481,\n\t0x1F482,\n\t0x1F483,\n\t0x1F485,\n\t0x1F486,\n\t0x1F487,\n\t0x1F4AA,\n\t0x1F575,\n\t0x1F57A,\n\t0x1F590,\n\t0x1F595,\n\t0x1F596,\n\t0x1F645,\n\t0x1F646,\n\t0x1F647,\n\t0x1F64B,\n\t0x1F64C,\n\t0x1F64D,\n\t0x1F64E,\n\t0x1F64F,\n\t0x1F6A3,\n\t0x1F6B4,\n\t0x1F6B5,\n\t0x1F6B6,\n\t0x1F6C0,\n\t0x1F918,\n\t0x1F919,\n\t0x1F91A,\n\t0x1F91B,\n\t0x1F91C,\n\t0x1F91D,\n\t0x1F91E,\n\t0x1F926,\n\t0x1F930,\n\t0x1F933,\n\t0x1F934,\n\t0x1F935,\n\t0x1F936,\n\t0x1F937,\n\t0x1F938,\n\t0x1F939,\n\t0x1F93C,\n\t0x1F93D,\n\t0x1F93E\n]);\n", "'use strict';\nconst emojiModifierBase = require('unicode-emoji-modifier-base');\n\nconst skinTones = new Map([\n\t['none', ''],\n\t['white', '\uD83C\uDFFB'],\n\t['creamWhite', '\uD83C\uDFFC'],\n\t['lightBrown', '\uD83C\uDFFD'],\n\t['brown', '\uD83C\uDFFE'],\n\t['darkBrown', '\uD83C\uDFFF']\n]);\n\nmodule.exports = (emoji, tone) => {\n\tif (!skinTones.has(tone)) {\n\t\tthrow new TypeError(`Unexpected \\`skinTone\\` name: ${tone}`);\n\t}\n\n\temoji = emoji.replace(/[\\u{1f3fb}-\\u{1f3ff}]/u, '');\n\n\tif (emojiModifierBase.has(emoji.codePointAt(0)) && tone !== 'none') {\n\t\temoji += skinTones.get(tone);\n\t}\n\n\treturn emoji;\n};\n", "// src/emojify.ts\nimport { assert as assert2, default as is } from \"@sindresorhus/is\";\n\n// src/findByName.ts\nimport { assert } from \"@sindresorhus/is\";\n\n// src/data.ts\nimport emojilib from \"emojilib\";\n\n// src/utils.ts\nimport charRegex from \"char-regex\";\nvar charRegexMatcher = charRegex();\nfunction asFunction(input) {\n  return typeof input === \"function\" ? input : () => input;\n}\nvar NON_SPACING_MARK = String.fromCharCode(65039);\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, \"g\");\nfunction normalizeCode(code) {\n  return code.replace(nonSpacingRegex, \"\");\n}\nfunction normalizeName(name) {\n  return /:.+:/.test(name) ? name.slice(1, -1) : name;\n}\nfunction randomItem(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n// src/data.ts\nvar emojiData = Object.entries(emojilib.lib).map(\n  ([name, { char: emoji }]) => [name, emoji]\n);\nvar emojiCodesByName = new Map(emojiData);\nvar emojiNamesByCode = new Map(\n  emojiData.map(([name, emoji]) => [normalizeCode(emoji), name])\n);\n\n// src/findByName.ts\nvar findByName = (name) => {\n  assert.string(name);\n  const nameNormalized = normalizeName(name);\n  const emoji = emojiCodesByName.get(nameNormalized);\n  return emoji ? { emoji, key: nameNormalized } : void 0;\n};\n\n// src/emojify.ts\nvar emojify = (input, { fallback, format = (name) => name } = {}) => {\n  const fallbackFunction = fallback === void 0 ? fallback : asFunction(fallback);\n  assert2.string(input);\n  assert2.any([is.undefined, is.function_], fallbackFunction);\n  assert2.function_(format);\n  return input.replace(/:([a-zA-Z0-9_\\-+]+):/g, (part) => {\n    const found = findByName(part);\n    if (found) {\n      return format(found.emoji, part, input);\n    }\n    if (fallbackFunction) {\n      return format(fallbackFunction(normalizeName(part)));\n    }\n    return format(part);\n  });\n};\n\n// src/findByCode.ts\nimport { assert as assert3 } from \"@sindresorhus/is\";\nvar findByCode = (code) => {\n  assert3.string(code);\n  const emojiNormalized = normalizeCode(code);\n  const key = emojiNamesByCode.get(emojiNormalized);\n  return key ? { emoji: emojiNormalized, key } : void 0;\n};\n\n// src/find.ts\nvar find = (codeOrName) => {\n  return findByCode(codeOrName) || findByName(codeOrName);\n};\n\n// src/get.ts\nimport { assert as assert4 } from \"@sindresorhus/is\";\nvar get = (codeOrName) => {\n  assert4.string(codeOrName);\n  return emojiCodesByName.get(normalizeName(codeOrName));\n};\n\n// src/has.ts\nimport { assert as assert5 } from \"@sindresorhus/is\";\nvar has = (codeOrName) => {\n  assert5.string(codeOrName);\n  return emojiCodesByName.has(normalizeName(codeOrName)) || emojiNamesByCode.has(normalizeCode(codeOrName));\n};\n\n// src/random.ts\nvar random = () => {\n  const [name, emoji] = randomItem(emojiData);\n  return { name, emoji };\n};\n\n// src/replace.ts\nimport { assert as assert6 } from \"@sindresorhus/is\";\nvar replace = (input, replacement, { preserveSpaces = false } = {}) => {\n  const replace2 = asFunction(replacement);\n  assert6.string(input);\n  assert6.function_(replace2);\n  assert6.boolean(preserveSpaces);\n  const characters = input.match(charRegexMatcher);\n  if (characters === null) {\n    return input;\n  }\n  return characters.map((character, index) => {\n    const found = findByCode(character);\n    if (!found) {\n      return character;\n    }\n    if (!preserveSpaces && characters[index + 1] === \" \") {\n      characters[index + 1] = \"\";\n    }\n    return replace2(found, index, input);\n  }).join(\"\");\n};\n\n// src/search.ts\nimport { assert as assert7 } from \"@sindresorhus/is\";\nvar search = (keyword) => {\n  assert7.string(keyword);\n  keyword = normalizeName(keyword);\n  return emojiData.filter(([name]) => name.includes(keyword)).map(([name, emoji]) => ({ name, emoji }));\n};\n\n// src/strip.ts\nvar strip = (input, { preserveSpaces } = {}) => replace(input, \"\", { preserveSpaces });\n\n// src/unemojify.ts\nimport { assert as assert9 } from \"@sindresorhus/is\";\n\n// src/which.ts\nimport { assert as assert8 } from \"@sindresorhus/is\";\nimport skinTone from \"skin-tone\";\nvar which = (emoji, { markdown = false } = {}) => {\n  assert8.string(emoji);\n  assert8.boolean(markdown);\n  const result = findByCode(skinTone(emoji, \"none\"));\n  if (result === void 0) {\n    return void 0;\n  }\n  return markdown ? `:${result.key}:` : result.key;\n};\n\n// src/unemojify.ts\nvar unemojify = (input) => {\n  assert9.string(input);\n  const characters = input.match(charRegexMatcher);\n  if (characters === null) {\n    return input;\n  }\n  return characters.map((character) => which(character, { markdown: true }) || character).join(\"\");\n};\nexport {\n  emojify,\n  find,\n  get,\n  has,\n  random,\n  replace,\n  search,\n  strip,\n  unemojify,\n  which\n};\n"],
  "mappings": "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",
  "names": ["is", "assert", "import_is", "charRegex", "emojilib", "assert2", "is", "assert3", "assert4", "assert5", "assert6", "assert7", "assert8", "skinTone", "assert9"]
}
