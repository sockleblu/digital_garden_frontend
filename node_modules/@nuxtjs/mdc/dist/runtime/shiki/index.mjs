import { visit } from "unist-util-visit";
import { toString } from "hast-util-to-string";
const defaults = {
  theme: {
    default: "github-light",
    dark: "github-dark"
  },
  highlighter: (code, lang, theme, highlights) => {
    return $fetch("/api/_mdc/highlight", {
      params: {
        code,
        lang,
        theme: JSON.stringify(theme),
        highlights: JSON.stringify(highlights)
      }
    });
  }
};
export function rehypeShiki(opts = {}) {
  const options = { ...defaults, ...opts };
  return async (tree) => {
    const tasks = [];
    const styles = [];
    visit(
      tree,
      (node) => ["pre", "code"].includes(node.tagName) && !!node.properties?.language,
      (node) => {
        const _node = node;
        const task = options.highlighter(
          toString(node),
          _node.properties.language,
          options.theme,
          _node.properties.highlights ?? []
        ).then(({ tree: tree2, className, style, inlineStyle }) => {
          _node.properties.className = ((_node.properties.className || "") + " " + className).trim();
          _node.properties.style = ((_node.properties.style || "") + " " + inlineStyle).trim();
          if (_node.children[0]?.tagName === "code") {
            _node.children[0].children = tree2;
          } else {
            _node.children = tree2[0].children;
          }
          if (style)
            styles.push(style);
        });
        tasks.push(task);
      }
    );
    if (tasks.length) {
      await Promise.all(tasks);
      tree.children.push({
        type: "element",
        tagName: "style",
        children: [{ type: "text", value: cleanCSS(styles.join("")) }],
        properties: {}
      });
    }
  };
}
const cleanCSS = (css) => {
  const styles = css.split("}").filter((s) => Boolean(s.trim())).map((s) => s.trim() + "}");
  return Array.from(new Set(styles)).join("");
};
